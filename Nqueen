def solve_n_queens(n):
    def is_safe(board, row, col):
        return all(board[i] != col and abs(board[i] - col) != row - i for i in range(row))
    
    def solve(row, board):
        if row == n:
            result.append(board)
            return
        for col in range(n):
            if is_safe(board, row, col):
                solve(row + 1, board + [col])
    
    result = []
    solve(0, [])
    return [['.'*i + 'Q' + '.'*(n-i-1) for i in solution] for solution in result]

n = 4
solutions = solve_n_queens(n)
for solution in solutions:
    for row in solution:
        print(row)
    print()
